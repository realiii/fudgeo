# -*- coding: utf-8 -*-
"""
Polygons
"""


from typing import Any, ClassVar, Union

from numpy import ndarray

from fudgeo.alias import DOUBLE, QUADRUPLE, TRIPLE
from fudgeo.geometry.base import AbstractGeometry
from fudgeo.geometry.point import Point, PointM, PointZ, PointZM
from fudgeo.geometry.util import Envelope


class BaseLinearRing(AbstractGeometry):
    """
    Base Linear Ring
    """
    _class: ClassVar[Any]
    _env_code: ClassVar[int]
    coordinates: ndarray

    def __init__(self, coordinates: list, srs_id: int) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    @property
    def __geo_interface__(self) -> dict: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def points(self) -> list: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> Any: ...
# End BaseLinearRing class


class LinearRing(BaseLinearRing):
    """
    Linear Ring
    """
    def __init__(self, coordinates: list[DOUBLE], srs_id: int) -> None: ...
    def __eq__(self, other: 'LinearRing') -> bool: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def points(self) -> list[Point]: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'LinearRing': ...
# End LinearRing class


class LinearRingZ(BaseLinearRing):
    """
    Linear Ring Z
    """
    def __init__(self, coordinates: list[TRIPLE], srs_id: int) -> None: ...
    def __eq__(self, other: 'LinearRingZ') -> bool: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def points(self) -> list[PointZ]: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @property
    def envelope(self) -> Envelope: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'LinearRingZ': ...
# End LinearRingZ class


class LinearRingM(BaseLinearRing):
    """
    Linear Ring M
    """
    def __init__(self, coordinates: list[TRIPLE], srs_id: int) -> None: ...
    def __eq__(self, other: 'LinearRingM') -> bool: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def points(self) -> list[PointM]: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'LinearRingM': ...
# End LinearRingM class


class LinearRingZM(BaseLinearRing):
    """
    Linear Ring ZM
    """
    def __init__(self, coordinates: list[QUADRUPLE], srs_id: int) -> None: ...
    def __eq__(self, other: 'LinearRingZM') -> bool: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def points(self) -> list[PointZM]: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> None: ...
# End LinearRingZM class


class BasePolygon(AbstractGeometry):
    """
    Base Polygon
    """
    _class: ClassVar[Any]
    _dimension: ClassVar[int]
    _env_code: ClassVar[int]
    _wkb_prefix: ClassVar[bytes]
    _rings: list

    def __init__(self, coordinates: list[list], srs_id: int) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    @property
    def __geo_interface__(self) -> dict: ...
    def _make_rings(self, coordinates: list[list]) -> list: ...
    @property
    def rings(self) -> list: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> Any: ...
# End BasePolygon class


class Polygon(BasePolygon):
    """
    Polygon
    """
    def __init__(self, coordinates: list[list[DOUBLE]], srs_id: int) -> None: ...
    def __eq__(self, other: 'Polygon') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, Union[str, tuple[tuple[DOUBLE]]]]: ...
    def _make_rings(self, coordinates: list[list[DOUBLE]]) -> list[LinearRing]: ...
    @property
    def rings(self) -> list[LinearRing]: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'Polygon': ...
# End Polygon class


class PolygonZ(BasePolygon):
    """
    Polygon Z
    """
    def __init__(self, coordinates: list[list[TRIPLE]], srs_id: int) -> None: ...
    def __eq__(self, other: 'PolygonZ') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, Union[str, tuple[tuple[TRIPLE]]]]: ...
    def _make_rings(self, coordinates: list[list[TRIPLE]]) -> list[LinearRingZ]: ...
    @property
    def rings(self) -> list[LinearRingZ]: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'PolygonZ': ...
# End PolygonZ class


class PolygonM(BasePolygon):
    """
    Polygon M
    """
    def __init__(self, coordinates: list[list[TRIPLE]], srs_id: int) -> None: ...
    def __eq__(self, other: 'PolygonM') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, Union[str, tuple[tuple[TRIPLE]]]]: ...
    def _make_rings(self, coordinates: list[list[TRIPLE]]) -> list[LinearRingM]: ...
    @property
    def rings(self) -> list[LinearRingM]: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'PolygonM': ...
# End PolygonM class


class PolygonZM(BasePolygon):
    """
    Polygon ZM
    """
    def __init__(self, coordinates: list[list[QUADRUPLE]], srs_id: int) -> None: ...
    def __eq__(self, other: 'PolygonZM') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, Union[str, tuple[tuple[QUADRUPLE]]]]: ...
    def _make_rings(self, coordinates: list[list[QUADRUPLE]]) -> list[LinearRingZM]: ...
    @property
    def rings(self) -> list[LinearRingZM]: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'PolygonZM': ...
# End PolygonZM class


class BaseMultiPolygon(AbstractGeometry):
    """
    Base Multi Polygon
    """
    _class: ClassVar[Any]
    _dimension: ClassVar[int]
    _env_code: ClassVar[int]
    _wkb_prefix: ClassVar[bytes]
    _polygons: list

    def __init__(self, coordinates: list[list[list]], srs_id: int) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    @property
    def __geo_interface__(self) -> dict: ...
    def _make_polygons(self, coordinates: list[list[list]]) -> list: ...
    @property
    def polygons(self) -> list: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> Any: ...
# End BaseMultiPolygon class


class MultiPolygon(BaseMultiPolygon):
    """
    Multi Polygon
    """
    def __init__(self, coordinates: list[list[list[DOUBLE]]], srs_id: int) -> None: ...
    def __eq__(self, other: 'MultiPolygon') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, Union[str, tuple[tuple[tuple[DOUBLE]]]]]: ...
    def _make_polygons(self, coordinates: list[list[list[DOUBLE]]]) -> list[Polygon]: ...
    @property
    def polygons(self) -> list[Polygon]: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'MultiPolygon': ...
# End MultiPolygon class


class MultiPolygonZ(BaseMultiPolygon):
    def __init__(self, coordinates: list[list[list[TRIPLE]]], srs_id: int) -> None: ...
    def __eq__(self, other: 'MultiPolygonZ') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, Union[str, tuple[tuple[tuple[TRIPLE]]]]]: ...
    def _make_polygons(self, coordinates: list[list[list[TRIPLE]]]) -> list[PolygonZ]: ...
    @property
    def polygons(self) -> list[PolygonZ]: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'MultiPolygonZ': ...
# End MultiPolygonZ class


class MultiPolygonM(BaseMultiPolygon):
    """
    Multi Polygon M
    """
    def __init__(self, coordinates: list[list[list[TRIPLE]]], srs_id: int) -> None: ...
    def __eq__(self, other: 'MultiPolygonM') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, Union[str, tuple[tuple[tuple[TRIPLE]]]]]: ...
    def _make_polygons(self, coordinates: list[list[list[TRIPLE]]]) -> list[PolygonM]: ...
    @property
    def polygons(self) -> list[PolygonM]: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'MultiPolygonM': ...
# End MultiPolygonM class


class MultiPolygonZM(BaseMultiPolygon):
    """
    Multi Polygon ZM
    """
    def __init__(self, coordinates: list[list[list[QUADRUPLE]]], srs_id: int) -> None: ...
    def __eq__(self, other: 'MultiPolygonZM') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, Union[str, tuple[tuple[tuple[QUADRUPLE]]]]]: ...
    def _make_polygons(self, coordinates: list[list[list[QUADRUPLE]]]) -> list[PolygonZM]: ...
    @property
    def polygons(self) -> list[PolygonZM]: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'MultiPolygonZM': ...
# End MultiPolygonZM class


if __name__ == '__main__':  # pragma: no cover
    pass
