# -*- coding: utf-8 -*-
"""
Line String
"""

from typing import Any, ClassVar, Union

from numpy import ndarray

from fudgeo.alias import DOUBLE, QUADRUPLE, TRIPLE
from fudgeo.geometry.base import AbstractGeometry
from fudgeo.geometry.point import Point, PointM, PointZ, PointZM
from fudgeo.geometry.util import Envelope


class BaseLineString(AbstractGeometry):
    """
    Base Line String
    """
    _class: ClassVar[Any]
    _dimension: ClassVar[int]
    _env_code: ClassVar[int]
    _has_m: ClassVar[bool]
    _has_z: ClassVar[bool]
    _wkb_prefix: ClassVar[bytes]
    _coordinates: ndarray

    def __init__(self, coordinates: list, srs_id: int) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    @property
    def __geo_interface__(self) -> dict: ...
    @property
    def coordinates(self) -> 'ndarray': ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def points(self) -> list: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> Any: ...
# End BaseLineString class


class LineString(BaseLineString):
    """
    Line String
    """
    def __init__(self, coordinates: list[DOUBLE], srs_id: int) -> None: ...
    def __eq__(self, other: 'LineString') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, tuple[DOUBLE]]: ...
    @property
    def coordinates(self) -> 'ndarray': ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def points(self) -> list[Point]: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'LineString': ...
# End LineString class


class LineStringZ(BaseLineString):
    """
    Line String Z
    """
    def __init__(self, coordinates: list[TRIPLE], srs_id: int) -> None: ...
    def __eq__(self, other: 'LineStringZ') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, tuple[TRIPLE]]: ...
    @property
    def coordinates(self) -> 'ndarray': ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def points(self) -> list[PointZ]: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'LineStringZ': ...
# End LineStringZ class


class LineStringM(BaseLineString):
    """
    Line String M
    """
    def __init__(self, coordinates: list[TRIPLE], srs_id: int) -> None: ...
    def __eq__(self, other: 'LineStringM') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, tuple[TRIPLE]]: ...
    @property
    def coordinates(self) -> 'ndarray': ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def points(self) -> list[PointM]: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'LineStringM': ...
# End LineStringM class


class LineStringZM(BaseLineString):
    """
    Line String ZM
    """
    def __init__(self, coordinates: list[QUADRUPLE], srs_id: int) -> None: ...
    def __eq__(self, other: 'LineStringZM') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, tuple[QUADRUPLE]]: ...
    @property
    def coordinates(self) -> 'ndarray': ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def points(self) -> list[PointZM]: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'LineStringZM': ...
# End LineStringZM class


class BaseMultiLineString(AbstractGeometry):
    """
    Base Multi Line String
    """
    _class: ClassVar[Any]
    _dimension: ClassVar[int]
    _env_code: ClassVar[int]
    _wkb_prefix: ClassVar[bytes]
    _lines: list

    def __init__(self, coordinates: list[list], srs_id: int) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    @property
    def __geo_interface__(self) -> dict: ...
    def _make_lines(self, coordinates: list[list]) -> list: ...
    @property
    def lines(self) -> list: ...
    @property
    def is_empty(self) -> bool: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @property
    def envelope(self) -> Envelope: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> Any: ...
# End BaseMultiLineString class


class MultiLineString(BaseMultiLineString):
    """
    Multi Line String
    """
    def __init__(self, coordinates: list[list[DOUBLE]], srs_id: int) -> None: ...
    def __eq__(self, other: 'MultiLineString') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, Union[str, tuple[tuple[DOUBLE]]]]: ...
    def _make_lines(self, coordinates: list[list[DOUBLE]]) -> list[LineString]: ...
    @property
    def lines(self) -> list[LineString]: ...
    @property
    def is_empty(self) -> bool: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @property
    def envelope(self) -> Envelope: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'MultiLineString': ...
# End MultiLineString class


class MultiLineStringZ(BaseMultiLineString):
    """
    Multi Line String Z
    """
    def __init__(self, coordinates: list[list[TRIPLE]], srs_id: int) -> None: ...
    def __eq__(self, other: 'MultiLineStringZ') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, Union[str, tuple[tuple[TRIPLE]]]]: ...
    def _make_lines(self, coordinates: list[list[TRIPLE]]) -> list[LineStringZ]: ...
    @property
    def lines(self) -> list[LineStringZ]: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'MultiLineStringZ': ...
# End MultiLineStringZ class


class MultiLineStringM(BaseMultiLineString):
    """
    Multi Line String M
    """
    def __init__(self, coordinates: list[list[TRIPLE]], srs_id: int) -> None: ...
    def __eq__(self, other: 'MultiLineStringM') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, Union[str, tuple[tuple[TRIPLE]]]]: ...
    def _make_lines(self, coordinates: list[list[TRIPLE]]) -> list[LineStringM]: ...
    @property
    def lines(self) -> list[LineStringM]: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'MultiLineStringM': ...
# End MultiLineStringM class


class MultiLineStringZM(BaseMultiLineString):
    """
    Multi Line String ZM
    """
    def __init__(self, coordinates: list[list[QUADRUPLE]], srs_id: int) -> None: ...
    def __eq__(self, other: 'MultiLineStringZM') -> bool: ...
    @property
    def __geo_interface__(self) -> dict[str, Union[str, tuple[tuple[QUADRUPLE]]]]: ...
    def _make_lines(self, coordinates: list[list[QUADRUPLE]]) -> list[LineStringZM]: ...
    @property
    def lines(self) -> list[LineStringZM]: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def envelope(self) -> Envelope: ...
    def _to_wkb(self, ary: bytearray) -> bytearray: ...
    @classmethod
    def from_gpkg(cls, value: bytes) -> 'MultiLineStringZM': ...
# End MultiLineStringZM class


if __name__ == '__main__':  # pragma: no cover
    pass
